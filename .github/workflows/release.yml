name: Release

on:
  release:
    types: [published]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache node modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: install deps
        run: |
          yarn install
      - name: lint
        run: |
          yarn lint
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache node modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: install
        run: |
          yarn install
      - name: test
        run: |
          yarn test-ci
  publish-npm:
    # only publish if not pre-release
    if: '!github.event.release.prerelease'
    # only publish if lint / test succeeded
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache node modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: install deps
        run: |
          yarn --frozen-lockfile
      - name: publish graffiti to npm if newer version
        run: |
          export CURRENT_VERSION=$(node -pe "require('./packages/graffiti/package.json').version")
          export PUBLISHED_VERSION=$(yarn info graffiti | grep latest | sed "s/[( +?)latest:,\',]//g")
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then yarn workspace graffiti publish --non-interactive; fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: publish graffiti-plugin-next to npm if newer version
        run: |
          export CURRENT_VERSION=$(node -pe "require('./packages/graffiti-plugin-next/package.json').version")
          export PUBLISHED_VERSION=$(yarn info graffiti-plugin-next | grep latest | sed "s/[( +?)latest:,\',]//g")
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then yarn workspace graffiti-plugin-next publish --non-interactive; fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: publish graffiti-plugin-auth to npm if newer version
        run: |
          export CURRENT_VERSION=$(node -pe "require('./packages/graffiti-plugin-auth/package.json').version")
          export PUBLISHED_VERSION=$(yarn info graffiti-plugin-auth | grep latest | sed "s/[( +?)latest:,\',]//g")
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then yarn workspace graffiti-plugin-auth publish --non-interactive; fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
